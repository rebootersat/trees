package bst;

public class BinarySearchTree<T extends Comparable> {

	private Node root;
	
	public void insert(T ele) {
		if( root == null)
			root = new Node(ele);
		else
			root = insert(root, ele);
	}

	private Node insert(Node root, T ele) {
		if(root == null)
			return new Node(ele);
		
		if(root.ele.compareTo(ele) > 0)
			root.left = insert(root.left, ele);
		
		if(root.ele.compareTo(ele) < 0)
			root.right = insert(root.right, ele);
		return root;
	}

	public void traverse()
	{
		
	}
	
	private void traverse(Node root)
	{
		if(root != null)
		{
			
		}
	}

	private class Node<T extends Comparable>{
		
		private Node left;
		private Node right;
		private T ele;
		

		public Node(T ele) {
			this.ele = ele;
		}
		
		public Node(Node left, Node right, T ele) {
			super();
			this.left = left;
			this.right = right;
			this.ele = ele;
		}
		
		
		
	}
	
}
